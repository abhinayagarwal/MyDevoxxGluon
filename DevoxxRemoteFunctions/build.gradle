import jp.classmethod.aws.gradle.lambda.AWSLambdaUpdateFunctionCodeTask

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
    }
}

apply plugin: 'java'
apply plugin: 'jp.classmethod.aws.lambda'

aws {
    profileName = "default"
    region = "eu-west-1"
}

lambda {
    region = "us-east-1"
}

repositories {
    jcenter()
}

dependencies {
    compile 'org.glassfish.jersey.core:jersey-client:2.26'
    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.26'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.26'
    compile "org.glassfish:javax.json:1.1"
    compile 'com.amazonaws:aws-lambda-java-core:1.1.0'
    compile 'com.amazonaws:aws-java-sdk-ses:1.11.368'
}

task conferenceZip(type: Zip) {
    archiveName = "conference.zip"
    into ('') {
        from sourceSets.main.output
        include "com/gluonhq/devoxx/serverless/conference/**"
        include "com/gluonhq/devoxx/serverless/util/**"
    }
    into('lib') {
        from configurations.runtime
    }
}

task updateConferenceLambda(type: AWSLambdaUpdateFunctionCodeTask, dependsOn: conferenceZip) {
    functionName = "devoxxConference"
    zipFile = new File("$buildDir/distributions/conference.zip")
}

task conferencesZip(type: Zip) {
    archiveName = "conferences.zip"
    into ('') {
        from sourceSets.main.output
        include "com/gluonhq/devoxx/serverless/conferences/**"
        include "com/gluonhq/devoxx/serverless/util/**"
    }
    into('lib') {
        from configurations.runtime
    }
}

task updateConferencesLambda(type: AWSLambdaUpdateFunctionCodeTask, dependsOn: conferencesZip) {
    functionName = "devoxxAllConferences"
    zipFile = new File("$buildDir/distributions/conferences.zip")
}

task feedbackZip(type: Zip) {
    archiveName = "feedback.zip"
    into ('') {
        from sourceSets.main.output
        include "com/gluonhq/devoxx/serverless/feedback/**"
    }
    into('lib') {
        from configurations.runtime
    }
}

task updateFeedbackLambda(type: AWSLambdaUpdateFunctionCodeTask, dependsOn: feedbackZip) {
    functionName = "devoxxSendFeedback"
    zipFile = new File("$buildDir/distributions/conferences.zip")
}

task sessionsZip(type: Zip) {
    archiveName = "sessions.zip"
    into ('') {
        from sourceSets.main.output
        include "com/gluonhq/devoxx/serverless/sessions/**"
        include "com/gluonhq/devoxx/serverless/util/**"
    }
    into('lib') {
        from configurations.runtime
    }
}

task updateSessionsLambda(type: AWSLambdaUpdateFunctionCodeTask, dependsOn: sessionsZip) {
    functionName = "devoxxRetrieveSessionsV2"
    zipFile = new File("$buildDir/distributions/sessions.zip")
}

task verifyaccountZip(type: Zip) {
    archiveName = "verifyaccount.zip"
    into ('') {
        from sourceSets.main.output
        include "com/gluonhq/devoxx/serverless/verifyaccount/**"
    }
    into('lib') {
        from configurations.runtime
    }
}

task updateVerifyaccountLambda(type: AWSLambdaUpdateFunctionCodeTask, dependsOn: verifyaccountZip) {
    functionName = "devoxxAccountCredentials"
    zipFile = new File("$buildDir/distributions/verifyaccount.zip")
}

task buildAwsLambda {
    dependsOn(
            conferenceZip, conferencesZip,
            feedbackZip, sessionsZip,
            verifyaccountZip
    )
}

task uploadAwsLambda {
    dependsOn(
            updateConferenceLambda, updateConferencesLambda,
            updateFeedbackLambda, updateSessionsLambda,
            updateVerifyaccountLambda
    )
}

build.dependsOn buildAwsLambda
jar.enabled = false
